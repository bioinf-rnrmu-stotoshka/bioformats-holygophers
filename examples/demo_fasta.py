#!/usr/bin/env python3
"""
–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê –¥–ª—è FASTA –º–æ–¥—É–ª—è

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å FASTA —Ñ–∞–π–ª–∞–º–∏.
–ó–∞–ø—É—Å—Ç–∏: python demo_fasta.py
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent / 'src'))

from formats.fasta import FastaProcessor, count_sequences_fasta, average_length_fasta


def create_demo_fasta_file():
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π FASTA —Ñ–∞–π–ª."""
    demo_content = """>NC_000001.11 Homo sapiens chromosome 1, GRCh38.p14 Primary Assembly
ACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTG
ACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTG
>NC_000002.12 Homo sapiens chromosome 2, GRCh38.p14 Primary Assembly
GGATCCGGATCCGGATCCGGATCCGGATCCGGATCCGGATCCGGATCCGGATCCGGATCCGGAT
CCGGATCCGGATCCGGATCC
>NP_001345678.1 transcription factor p65 [Homo sapiens]
MKQLVKETLERQLTQKQITKQEISPLKKTKKKQKkQDEDFKLFRKTFNLPEELERLLGILGNRF
SIDDDSLGRLISRLLQELNGIN
>short_sequence
ATCG
>very_long_sequence
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
"""

    demo_file = "demo_sequences.fasta"
    with open(demo_file, 'w', encoding='utf-8') as f:
        f.write(demo_content)

    return demo_file


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("=" * 60)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø FASTA –ú–û–î–£–õ–Ø: –í–ñ–£–£–£–£–£–£–•")
    print("=" * 60)

    # 1. –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ —Ñ–∞–π–ª
    print("\n1. –°–û–ó–î–ê–ï–ú –î–ï–ú–û–°–¢–†–ê–¶–ò–û–ù–ù–´–ô FASTA –§–ê–ô–õ. –ñ–¥–∏ –¥–∞–≤–∞–π, –ñ–î–ò.")
    demo_file = create_demo_fasta_file()
    print(f"   –°–æ–∑–¥–∞–Ω (–∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é) —Ñ–∞–π–ª: {demo_file}")

    try:
        # 2. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        print("\n2. üîß –°–û–ó–î–ê–ï–ú FASTA –ü–†–û–¶–ï–°–°–û–†...")
        processor = FastaProcessor(demo_file)
        print("–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ! –ú–¥–∞..–æ–≥–æ—Ä—á–µ–Ω–∏–µ.")

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        print("\n3.–ü–†–û–í–ï–†–ö–ê –§–û–†–ú–ê–¢–ê FASTA... (–ù–µ –ø—Ä–æ—à–µ–ª!)")
        is_valid = processor.validate_format()
        print(f" –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ (–Ω–µ)–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: {is_valid}")

        # 4. –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n4. –û–°–ù–û–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        stats = processor.get_statistics()
        print(f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: {stats['sequence_count']}")
        print(f"   ‚Ä¢ –û–±—â–∞—è –¥–ª–∏–Ω–∞: {stats['total_length']} bp")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {stats['average_length']:.2f} bp")
        print(f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {stats['min_length']} bp")
        print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {stats['max_length']} bp")

        # 5. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
        print("\n5. –ò–¢–ï–†–ê–¶–ò–Ø –ü–û –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–Ø–ú:")
        print("   –ü–µ—Ä–≤—ã–µ 3 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        for i, (header, sequence) in enumerate(processor.sequence_generator()):
            if i >= 3:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                break
            short_header = header[:50] + "..." if len(header) > 50 else header
            print(f"     {i + 1}. {short_header}")
            print(f"        –î–ª–∏–Ω–∞: {len(sequence)} bp")
            print(f"        –ù–∞—á–∞–ª–æ: {sequence[:30]}...")

        # 6. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        print("\n6. –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–û –î–õ–ò–ù–ï:")
        filtered = processor.filter_sequences(min_length=50, max_length=200)
        print(f"   ‚Ä¢ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –æ—Ç 50 –¥–æ 200 bp: {len(filtered)}")

        # 7. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        print("\n7. –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò:")
        quick_count = count_sequences_fasta(demo_file)
        quick_avg = average_length_fasta(demo_file)
        print(f"   ‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –ø–æ–¥—Å—á–µ—Ç: {quick_count} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")
        print(f"   ‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è —Å—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: {quick_avg:.2f} bp")

        # 8. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        print("\n8. –°–û–ó–î–ê–ù–ò–ï –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–ù–û–ì–û –§–ê–ô–õ–ê. –ê —è –Ω–µ —Å–æ–∑–¥–∞–º-–∞ —è –Ω–µ —Å–æ–∑–¥–∞–º! –ë–µ–±–µ–±–µ–±–µ")
        output_file = "filtered_demo.fasta"
        written_count = processor.write_filtered_fasta(output_file, min_length=10)
        print(f" –ß–µ—Ä—Ç...–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª '{output_file}' —Å {written_count} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏")

        print("\n" + "=" * 60)
        print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø (–ù–ï)–£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("=" * 60)

    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if os.path.exists(demo_file):
            os.remove(demo_file)
            print(f"\n –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {demo_file}")
        if os.path.exists("filtered_demo.fasta"):
            os.remove("filtered_demo.fasta")
            print(f" –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: filtered_demo.fasta")


if __name__ == "__main__":
    main()